import urllib.request, urllib.error, urllib.parseimport daemon.GlobalFuncs as GFimport slinger.SlingerGlobalFuncs as SGFimport daemon.HTTPDaemon  as HTTPDaemonimport loggingroot_logger = logging.getLogger()root_logger.disabled = Truetry:    self   = eval('self')    output = self.output    cfg    = GF.Config    # Get request parameters    postData = self.getCGIParametersFormData ()    if 'filter' not in list(postData.keys()):        postData['filter'] = ''    if 'action' in list(postData.keys()):        if postData['action'].lower() == 'load':            pass        if postData['action'].lower() == 'read':            self.do_HEAD(turnOffCache=True, mimetype='text/plain')            logIdx = 0            if 'idx' in list(postData.keys()):                try:                    logIdx = int(postData['idx'])                except:                    logIdx = 0            list = SGF.ColLogFormatter.dumpLogReviewBuffer(SGF.ColLogFormatter.RB_RTNTYPE_HTML, logIdx)            for line in list:                output (line +"\n")            self.wfile.flush()            exit(0)    # =======================================================    self.do_HEAD(turnOffCache=True)    output (r'''<!DOCTYPE html><html lang="en"><head>    <link rel="stylesheet" href="jquery-ui/jquery-ui.css">         <script src="jquery-ui/jquery-3.7.1.js"></script>    <script src="jquery-ui/jquery-ui.js"></script>      <script type="text/javascript" src="jquery-toast/jquery.toast.js"></script>    <link rel="stylesheet" href="jquery-toast/jquery.toast.css">	<link rel="stylesheet" href="fontawesome/css/all.css" />   	    <link rel="stylesheet" href="css/pure-button.css">       <link rel="stylesheet" href="css/buttons.css">	   					    <style type="text/css" media="screen">        #editor {            position: absolute;            top: 0px;            right: 0;            bottom: 0;            left: 0;        }        /** Log Viewer Toolbar **/.LogViewerToolbar{    padding:         2px;    background:      rgba(255,255,255,0.8);    vertical-align:  middle;    position:        fixed;    top:             0px;    width:           100%;    font-size:       x-small;}            </style>    </head><!-- log header spacer --><div style="font-family: monospace; font-size:small;">&nbsp;</div><div style="font-family: monospace; font-size:small;">&nbsp;</div><div style="font-family: monospace; font-size:small;">&nbsp;</div><div style="font-family: monospace; font-size:small;">&nbsp;</div><!-- log viewer --><div id="tail" style="font-family: monospace; font-size:small;"></div><!-- floating tail control menu --><div class="button-xsmall LogViewerToolbar">        <label for="selFontSize">Font Size:</label>        <select id="selFontSize" style="width:100px" size="1" class="">            <option value="medium">medium</option>            <option value="xx-small">xx-small</option>            <option value="x-small">x-small</option>            <option value="small" checked>small</option>            <option value="large">large</option>            <option value="x-large">x-large</option>        </select>        <button                         class="pure-button button-direction" onclick="javascript:ClearLog();"><i class=" fa-solid fa-trash-can fa-IconSpLeft"></i>Clear Log</button>        <button id="StartStopTailBut"   class="pure-button button-start     " onclick="javascript:StartStopTail();"></button>        <button id="StartStopScrollBut" class="pure-button button-start     " onclick="javascript:StartStopAutoScroll();"></button>        <button id="ReverseLogBut"      class="pure-button button-filter" onclick="javascript:ReverseLog();"></button>     <br>        <label for="maxBuffer">Max Log Lines:</label>        <input id="maxBuffer" type="number" min="5" max="9999" value="2000"/>        <label for="filter">RegExp Filter:</label>        <input id="filter" type="text" value="''' + postData['filter'] + r'''"/>        <label for="curBuffLen">Log Buffer Size:</label>        <input id="curBuffLen" type="number" min="5" max="9999" readonly/>           <input type="checkbox" id="quietLog" value="T" checked class="pure-button ">        <label for="option1">Quieter Output</label>       </div><script> var RefreshTailInterrupt = null;var AutoScrollTail       = false;var LogDisplayTopDown    = false;var LogIndex             = 0;var QuieterInputMatch = ["/castinfo.py HTTP"];function ClearLog (){    $('#tail').html('');}function ReverseLog (){    if (LogDisplayTopDown)    {        LogDisplayTopDown = false;        $('#ReverseLogBut').html("<i class='fa fa-arrow-up fa-IconSpLeft'></i>Log Prepend");    }    else    {        LogDisplayTopDown = true;        $('#ReverseLogBut').html("<i class='fa fa-arrow-down fa-IconSpLeft'></i>Log Append");    }    var list = $('#tail');    var listItems = list.children('div');    list.append(listItems.get().reverse());    tailScroll();}function StartStopTail (){    if (RefreshTailInterrupt != null)    {        clearInterval(RefreshTailInterrupt);        RefreshTailInterrupt = null;        $('#StartStopTailBut').html("<i class='fa fa-play fa-IconSpLeft'></i>Start Tail");        $("#StartStopTailBut").toggleClass ("button-pause");        $("#StartStopTailBut").toggleClass ("button-start");    }    else    {        RefreshTailInterrupt = setInterval(tailAppend, 1000);        $('#StartStopTailBut').html("<i class='fa fa-stop fa-IconSpLeft'></i>Stop Tail");        $("#StartStopTailBut").toggleClass ("button-start");        $("#StartStopTailBut").toggleClass ("button-pause");    }}function StartStopAutoScroll (){    if (AutoScrollTail)    {        AutoScrollTail = false;        $('#StartStopScrollBut').html("<i class='fa fa-play fa-IconSpLeft'></i>Start AutoScroll");        $("#StartStopScrollBut").toggleClass ("button-start");        $("#StartStopScrollBut").toggleClass ("button-pause");    }    else    {        AutoScrollTail = true;        $('#StartStopScrollBut').html("<i class='fa fa-stop fa-IconSpLeft'></i>Stop AutoScroll");        $("#StartStopScrollBut").toggleClass ("button-pause");        $("#StartStopScrollBut").toggleClass ("button-start");    }}// tail effectfunction tailScroll(){    if (AutoScrollTail)    {        if (LogDisplayTopDown)        {            $('html,body').animate({                scrollTop: $("#tail").get(0).scrollHeight            }, 'slow');        }        else        {            $('html,body').animate({                scrollTop: 0            }, 'slow');        }    }}function checkFilter (){    var regExp = new RegExp($('#filter').val(), 'i');    if (LogDisplayTopDown)        itemChk = $("#tail").children().last();    else        itemChk = $("#tail").children().first();    if (! regExp.test(itemChk.html()))        itemChk.hide();}function checkPurgeMaxBuffer (){    // console.log ("maxBuffer = ->" + $('#maxBuffer').val() + "<-  Parse Int:" + parseInt($('#maxBuffer').val()));    var maxBuffer = parseInt($('#maxBuffer').val());    var listLen     = $('#tail').children('div').length;    var lastListLen = $('#tail').children('div').length+1;    var row         = null;    while ((listLen > maxBuffer) && (listLen != lastListLen))    {        if (LogDisplayTopDown)            row = $("#tail").children().first();        else            row = $("#tail").children().last();        if (row)            row.remove();        else        {            console.log ("Failed Head/Tail detection ... clearing the logs to resolve!");            ClearLog ();            break;        }        lastListLen = listLen;        listLen     = $('#tail').children().length;        // Fail-safe loop protection        if (listLen == lastListLen)        {            console.log ("Fail-safe loop protection ... clearing the logs to resolve!");            ClearLog ();            break;                }    }}// add line to logfunction tailAppend(){    checkPurgeMaxBuffer ();    $.ajax({            url: "logviewer.py",            type: 'POST',            data: {                "action" : "read",                "idx"    : (LogIndex+1).toString()            },            dataType: 'text',            async: true,            success: function(result)            {                // console.log (result);                let logLines  = result.split("\n");                let count     = 0;                let re        = /^\[(.*?)\](.*)/                let quietLog  = $('#quietLog').prop('checked');                                                for (var i = 0; i < logLines.length; i++)                {                    if (logLines[i] != "")                    {                        // parse out the line number from the log                        l = logLines[i].match(re);                        if (! l)                        {                            // if no match on line number header, then this is a mult-line line debug line.                            // create its own pre section to append                            line = '<div style="line-height:0px"><pre style="white-space:pre">' + logLines[i].replace(/[\n\r]+/g, '') + '</pre></div>';                        }                        else                        {                            try                            {                                // Matched line number header found, extract debug string after header and                                // append to the output. If line is blank, then ignore, its a terminating line.                                LogIndex = parseInt(l[1]);                                line     = l[2];                                if (line == "")                                    line = null;                            }                            catch(err) { }                        }                        // If there is text to output ...                        if (line != null)                        {                            if (quietLog)                            {                                let m = null;                                for (let qi = 0; qi < QuieterInputMatch.length; qi++)                                {                                    m = line.match(QuieterInputMatch[qi]);                                    if (m)                                        break;                                                                       }                                if (m)                                    continue;                            }                                                        count++;                            if (LogDisplayTopDown)                                $('#tail').append(line).css ("white-space", "pre");                            else                                $('#tail').prepend (line).css ("white-space", "pre");                            checkFilter ();                            checkPurgeMaxBuffer ();                        }                    }                }                if (count > 0)                {                    tailScroll();                }                                $('#curBuffLen').val($('#tail').children().length);            },            error: function (jqXHR, textStatus, errorThrown)            {                // Just keep trying...                if (RefreshTailInterrupt)                {                    try{ clearInterval (RefreshTailInterrupt); } catch (err) {}                    RefreshTailInterrupt = setInterval(tailAppend, 1000);                }            }          });}function searchDivs (inputVal){    var regExp = new RegExp(inputVal, 'i');    var divLog  = $('#tail');    divLog.find('div').each(function(index, row)    {        if (regExp.test(row.innerText))            $(row).show();        else            $(row).hide();    });}$(document).ready(function(){    $('#selFontSize').change(function()    {        $("#tail").css( "fontSize", $(this).val());    });    $('#filter').keyup(function()    {        searchDivs($(this).val());    });    // *** Init Log viewer controls ***    tailScroll ();    StartStopTail ();    StartStopAutoScroll ();    ReverseLog ();});</script>''')finally:    root_logger.disabled = False